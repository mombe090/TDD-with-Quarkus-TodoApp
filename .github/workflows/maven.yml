# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ "feature/*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-package-app:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Setup branch name
      run: |
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
          
    - name: Cache
      uses: actions/cache@v3.0.5
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
            ${{ runner.os }}-maven-${{ env.BRANCH_NAME }}
    
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    - name: Zip the target folder
      run:  find target -maxdepth 1 -type d -exec zip artefacts.zip {} +

    - name: Upload the artefacts
      uses: actions/upload-artifact@v1
      with:
        name: artefacts
        path: ./artefacts.zip
  
  build-and-push-docker-image:
    needs: build-and-package-app

    
    runs-on: ubuntu-latest
    env:
      FRAMEWORK: quarkus
      APP_NAME: todo-backend-quarkusapp
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v1
      with:
        name: artefacts
        path: ./

    - name: Unzip and extract the artefacts
      run: unzip artefacts.zip

    - name: Build Docker Image
      run: |
          docker build . --file Dockerfile.jvm --tag ${{ env.APP_NAME }}

    - name: Login to dockerhub container registry
      run: echo "${{ secrets.docker_hub_token }}" | docker login -u ${{ secrets.docker_hub_user }} --password-stdin

    - name: Push image
      run: |
          IMAGE_ID=${{ secrets.docker_hub_user }}/$SERVICE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          
          echo "push version ${{steps.getPomVersion.outputs.info}}"
          
          VERSION=$BRANCH_NAME
          
          echo IMAGE_ID=$IMAGE_ID
          
          echo VERSION=$VERSION
          
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          
          docker push $IMAGE_ID:$VERSION
          
